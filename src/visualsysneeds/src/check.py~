#!/usr/bin/env python
PKG = 'visualsysneeds'
import roslib; roslib.load_manifest(PKG)
import rospy
import cv2
import sys
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class Test:

    def __init__(self):
        self.image_sub = rospy.Subscriber("/camera/rgb/image_raw",Image, self.callback)
        self.image_sub = rospy.Subscriber("test_image",Image, self.callback2)
        self.image_pub = rospy.Publisher("test_image", Image)
        self.bridge = CvBridge()

    def callback(self, image):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(image, 'mono8')
        except CvBridgeError, e:
            print e

        print cv_image.shape ### output: (480, 640, 1)
        cv2.imshow("Test", cv_image)
        cv2.imwrite("Test.png", cv_image)
        cv2.waitKey(3)

        test2 = cv2.imread("Test.png")
        print test2.shape ### output: (480, 640, 3)
        cv2.imshow("Test 2",test2)
        cv2.waitKey(3)
        test2 = cv2.resize(test2,(250,240))
        print test2.shape ### output: (250, 240, 3)
        self.image_pub.publish(self.bridge.cv2_to_imgmsg(test2))

    def callback2(self, image):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(image)
        except CvBridgeError, e:
            print e

        cv2.imshow("Test3", cv_image)
        cv2.waitKey(3)

def main(args):
    test = Test()
    rospy.init_node('image_converter', anonymous=True)

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print "Shutting down"
    cv2.destroyAllWindows()


if __name__ == '__main__':
    main(sys.argv)


